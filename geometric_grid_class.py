from __future__ import print_function
import sys
sys.setrecursionlimit(99999999)

# n = 2
# m = 2
k = 7
# grid = [ [ None for j in range(m) ] for i in range(n) ]
# grid = [ [ 1,0 ],[0,1] ]
# grid = [ [-1,-1],[1,-1] ]
grid = [[1,-1],[1,-1]]
n = len(grid)
m = len(grid[0])

class Node:
    def __init__(self, id, parent=None):
        self.id = id
        self.left = None
        self.right = None
        self.parent = parent

class BinarySearchTree:

    def __init__(self):
        self.root = None
        self.node = {}

    def attach_right(self, id, node):
        while node.right is not None:
            node = node.right
        node.right = self.node[id] = Node(id, node)

    def attach_left(self, id, node):
        while node.left is not None:
            node = node.left
        node.left = self.node[id] = Node(id, node)

    def insert_before(self, id, right_id):
        assert right_id is None or right_id in self.node
        if right_id is None:
            if self.root is None:
                self.root = self.node[id] = Node(id)
            else:
                self.attach_right(id, self.root)
        else:
            right_node = self.node[right_id]
            if right_node.left is None:
                right_node.left = self.node[id] = Node(id, right_node)
            else:
                self.attach_right(id, right_node.left)

        trav = self.inorder_traversal()
        if right_id is None:
            assert trav[-1] == id
        else:
            assert trav.index(id) + 1 == trav.index(right_id)

    def insert_after(self, id, left_id):
        assert left_id is None or left_id in self.node
        if left_id is None:
            if self.root is None:
                self.root = self.node[id] = Node(id)
            else:
                self.attach_left(id, self.root)
        else:
            left_node = self.node[left_id]
            if left_node.right is None:
                left_node.right = self.node[id] = Node(id, left_node)
            else:
                self.attach_left(id, left_node.right)

        trav = self.inorder_traversal()
        if left_id is None:
            assert trav[0] == id
        else:
            assert trav.index(id) - 1 == trav.index(left_id)

    def remove(self, id):
        node = self.node[id]
        del self.node[id]
        assert node.left is None
        assert node.right is None
        if node.parent is None:
            self.root = None
        elif node.parent.left == node:
            node.parent.left = None
        elif node.parent.right == node:
            node.parent.right = None
        else:
            assert False

    def inorder_traversal(self):
        res = []
        def dfs(v):
            if v is None: return
            dfs(v.left)
            res.append(v.id)
            dfs(v.right)
        dfs(self.root)
        return res

def construct_permutation(rows, cols):
    n = len(rows)
    m = len(cols)
    l = sum( len(c) for c in cols )
    idx = [-1]*l
    perm = [-1]*l
    at = 0
    for i in range(m):
        for j in range(len(cols[i])):
            idx[cols[i][j]] = at
            at += 1

    at = 1
    for i in range(n-1,-1,-1):
        for j in range(len(rows[i])-1,-1,-1):
            perm[idx[rows[i][j]]] = at
            at += 1

    if tuple(perm) == (5, 1, 4, 2, 3):
        print(rows)
        print(cols)
    return tuple(perm)


rows = [ BinarySearchTree() for i in range(n) ]
cols = [ BinarySearchTree() for i in range(m) ]
res = {}

def bt(k,x,y, id):
    if y == m:
        bt(k, x + 1, 0, id)
        return
    elif x == n:
        # print(grid)
        # for r in range(n):
        #     print('row', r, rows[r].inorder_traversal())
        # for c in range(m):
        #     print('col', c, cols[c].inorder_traversal())
        # gridt = tuple([ tuple(row) for row in grid ])
        # print('xxx')
        gridt = tuple([ tuple(row) for row in grid ])
        perm = construct_permutation([ row.inorder_traversal() for row in rows ], [ col.inorder_traversal() for col in cols ])
        res.setdefault(gridt,set())
        res[gridt].add(perm)
        return

    hlines = rows[x].inorder_traversal()
    vlines = cols[y].inorder_traversal()

    horizontal = len(hlines)
    vertical = len(vlines)

    def bt2(k,i,j, id, must):

        if k > 0:
            # put one more here
            # print('another in ', x,y, i,j, hlines, vlines)
            if grid[x][y] == -1:
                rows[x].insert_before(id, hlines[i] if i < len(hlines) else None)
            else:
                rows[x].insert_after(id, hlines[i-1] if 0 <= i-1 else None)
            cols[y].insert_before(id, vlines[j] if j < len(vlines) else None)
            bt2(k - 1, i, j, id + 1, False)
            rows[x].remove(id)
            cols[y].remove(id)

        if not must:
            # don't put anything more down
            bt(k, x, y + 1, id)

            # jump somewhere else
            if k > 0:
                di = -grid[x][y]
                dj = 1

                for up in range( i+1 if grid[x][y] == 1 else horizontal+1 - i ):
                    for right in range(vertical+1 - j):

                        # don't jump here again...
                        if up == 0 and right == 0:
                            continue

                        bt2(k, i + up * di, j + right * dj, id, True)

    lo = -1
    hi = 1
    if grid[x][y] is not None:
        lo = hi = grid[x][y]

    for t in range(lo,hi+1):
        grid[x][y] = t

        if t == 1:
            # increasing at (x,y)
            bt2(k, horizontal, 0, id, False)
        elif t == -1:
            # decreasing at (x,y)
            bt2(k, 0, 0, id, False)
        else:
            # empty at (x,y)
            bt(k, x, y + 1, id)

    if lo < hi:
        grid[x][y] = None

bt(k, 0, 0, 0)

christian = [[[]], [[1]], [[1, 2], [2, 1]], [[1, 2, 3], [2, 3, 1], [2, 1, 3], [3, 1, 2], [1, 3, 2], [3, 2, 1]], [[1, 2, 3, 4], [2, 3, 4, 1], [2, 3, 1, 4], [3, 4, 1, 2], [1, 2, 4, 3], [3, 4, 2, 1], [2, 1, 3, 4], [3, 1, 4, 2], [3, 1, 2, 4], [4, 1, 2, 3], [2, 1, 4, 3], [4, 1, 3, 2], [1, 3, 4, 2], [2, 4, 1, 3], [1, 4, 3, 2], [3, 2, 1, 4], [3, 2, 4, 1], [4, 2, 3, 1], [2, 4, 3, 1], [4, 3, 2, 1], [1, 3, 2, 4], [1, 4, 2, 3], [4, 2, 1, 3], [4, 3, 1, 2]], [[1, 2, 3, 4, 5], [2, 3, 4, 5, 1], [2, 3, 4, 1, 5], [3, 4, 5, 1, 2], [1, 2, 3, 5, 4], [3, 4, 5, 2, 1], [2, 3, 1, 4, 5], [3, 4, 1, 5, 2], [3, 4, 1, 2, 5], [4, 5, 1, 2, 3], [2, 3, 1, 5, 4], [4, 5, 1, 3, 2], [1, 2, 4, 5, 3], [2, 3, 5, 1, 4], [1, 2, 5, 4, 3], [3, 4, 2, 1, 5], [3, 4, 2, 5, 1], [4, 5, 2, 3, 1], [2, 3, 5, 4, 1], [4, 5, 3, 2, 1], [2, 1, 3, 4, 5], [3, 1, 4, 5, 2], [3, 1, 4, 2, 5], [4, 1, 5, 2, 3], [2, 1, 3, 5, 4], [4, 1, 5, 3, 2], [3, 1, 2, 4, 5], [4, 1, 2, 5, 3], [4, 1, 2, 3, 5], [5, 1, 2, 3, 4], [3, 1, 2, 5, 4], [5, 1, 2, 4, 3], [2, 1, 4, 5, 3], [3, 1, 5, 2, 4], [2, 1, 5, 4, 3], [4, 1, 3, 2, 5], [4, 1, 3, 5, 2], [5, 1, 3, 4, 2], [3, 1, 5, 4, 2], [5, 1, 4, 3, 2], [1, 3, 4, 5, 2], [2, 4, 5, 1, 3], [2, 4, 1, 5, 3], [3, 5, 1, 2, 4], [1, 3, 5, 4, 2], [3, 5, 2, 1, 4], [1, 4, 5, 3, 2], [2, 5, 1, 4, 3], [1, 5, 4, 3, 2], [3, 2, 1, 5, 4], [3, 2, 5, 1, 4], [4, 2, 3, 1, 5], [2, 5, 4, 1, 3], [4, 3, 2, 1, 5], [3, 2, 4, 5, 1], [4, 2, 5, 3, 1], [4, 2, 3, 5, 1], [5, 2, 3, 4, 1], [3, 2, 5, 4, 1], [5, 2, 4, 3, 1], [2, 4, 5, 3, 1], [3, 5, 2, 4, 1], [2, 5, 4, 3, 1], [4, 3, 2, 5, 1], [4, 3, 5, 2, 1], [5, 3, 4, 2, 1], [3, 5, 4, 2, 1], [5, 4, 3, 2, 1], [1, 3, 4, 2, 5], [1, 4, 5, 2, 3], [1, 3, 2, 4, 5], [1, 4, 2, 5, 3], [1, 4, 2, 3, 5], [1, 5, 2, 3, 4], [1, 3, 2, 5, 4], [1, 5, 2, 4, 3], [1, 3, 5, 2, 4], [1, 4, 3, 2, 5], [1, 4, 3, 5, 2], [1, 5, 3, 4, 2], [1, 2, 4, 3, 5], [1, 2, 5, 3, 4], [1, 5, 3, 2, 4], [1, 5, 4, 2, 3], [4, 5, 2, 1, 3], [5, 1, 3, 2, 4], [3, 5, 1, 4, 2], [4, 2, 1, 5, 3], [4, 2, 5, 1, 3], [5, 2, 3, 1, 4], [3, 5, 4, 1, 2], [5, 3, 2, 1, 4], [5, 2, 1, 4, 3], [5, 4, 1, 3, 2], [2, 5, 3, 1, 4], [2, 4, 3, 1, 5], [4, 5, 3, 1, 2], [5, 2, 4, 1, 3], [5, 4, 3, 1, 2], [5, 4, 2, 1, 3], [2, 4, 3, 5, 1], [2, 5, 3, 4, 1], [5, 3, 2, 4, 1], [5, 4, 2, 3, 1]], [[1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 1], [2, 3, 4, 5, 1, 6], [3, 4, 5, 6, 1, 2], [1, 2, 3, 4, 6, 5], [3, 4, 5, 6, 2, 1], [2, 3, 4, 1, 5, 6], [3, 4, 5, 1, 6, 2], [3, 4, 5, 1, 2, 6], [4, 5, 6, 1, 2, 3], [2, 3, 4, 1, 6, 5], [4, 5, 6, 1, 3, 2], [1, 2, 3, 5, 6, 4], [2, 3, 4, 6, 1, 5], [1, 2, 3, 6, 5, 4], [3, 4, 5, 2, 1, 6], [3, 4, 5, 2, 6, 1], [4, 5, 6, 2, 3, 1], [2, 3, 4, 6, 5, 1], [4, 5, 6, 3, 2, 1], [2, 3, 1, 4, 5, 6], [3, 4, 1, 5, 6, 2], [3, 4, 1, 5, 2, 6], [4, 5, 1, 6, 2, 3], [2, 3, 1, 4, 6, 5], [4, 5, 1, 6, 3, 2], [3, 4, 1, 2, 5, 6], [4, 5, 1, 2, 6, 3], [4, 5, 1, 2, 3, 6], [5, 6, 1, 2, 3, 4], [3, 4, 1, 2, 6, 5], [5, 6, 1, 2, 4, 3], [2, 3, 1, 5, 6, 4], [3, 4, 1, 6, 2, 5], [2, 3, 1, 6, 5, 4], [4, 5, 1, 3, 2, 6], [4, 5, 1, 3, 6, 2], [5, 6, 1, 3, 4, 2], [3, 4, 1, 6, 5, 2], [5, 6, 1, 4, 3, 2], [1, 2, 4, 5, 6, 3], [2, 3, 5, 6, 1, 4], [2, 3, 5, 1, 6, 4], [3, 4, 6, 1, 2, 5], [1, 2, 4, 6, 5, 3], [3, 4, 6, 2, 1, 5], [1, 2, 5, 6, 4, 3], [2, 3, 6, 1, 5, 4], [1, 2, 6, 5, 4, 3], [3, 4, 2, 1, 6, 5], [3, 4, 2, 6, 1, 5], [4, 5, 2, 3, 1, 6], [2, 3, 6, 5, 1, 4], [4, 5, 3, 2, 1, 6], [3, 4, 2, 5, 6, 1], [4, 5, 2, 6, 3, 1], [4, 5, 2, 3, 6, 1], [5, 6, 2, 3, 4, 1], [3, 4, 2, 6, 5, 1], [5, 6, 2, 4, 3, 1], [2, 3, 5, 6, 4, 1], [3, 4, 6, 2, 5, 1], [2, 3, 6, 5, 4, 1], [4, 5, 3, 2, 6, 1], [4, 5, 3, 6, 2, 1], [5, 6, 3, 4, 2, 1], [3, 4, 6, 5, 2, 1], [5, 6, 4, 3, 2, 1], [2, 1, 3, 4, 5, 6], [3, 1, 4, 5, 6, 2], [3, 1, 4, 5, 2, 6], [4, 1, 5, 6, 2, 3], [2, 1, 3, 4, 6, 5], [4, 1, 5, 6, 3, 2], [3, 1, 4, 2, 5, 6], [4, 1, 5, 2, 6, 3], [4, 1, 5, 2, 3, 6], [5, 1, 6, 2, 3, 4], [3, 1, 4, 2, 6, 5], [5, 1, 6, 2, 4, 3], [2, 1, 3, 5, 6, 4], [3, 1, 4, 6, 2, 5], [2, 1, 3, 6, 5, 4], [4, 1, 5, 3, 2, 6], [4, 1, 5, 3, 6, 2], [5, 1, 6, 3, 4, 2], [3, 1, 4, 6, 5, 2], [5, 1, 6, 4, 3, 2], [3, 1, 2, 4, 5, 6], [4, 1, 2, 5, 6, 3], [4, 1, 2, 5, 3, 6], [5, 1, 2, 6, 3, 4], [3, 1, 2, 4, 6, 5], [5, 1, 2, 6, 4, 3], [4, 1, 2, 3, 5, 6], [5, 1, 2, 3, 6, 4], [5, 1, 2, 3, 4, 6], [6, 1, 2, 3, 4, 5], [4, 1, 2, 3, 6, 5], [6, 1, 2, 3, 5, 4], [3, 1, 2, 5, 6, 4], [4, 1, 2, 6, 3, 5], [3, 1, 2, 6, 5, 4], [5, 1, 2, 4, 3, 6], [5, 1, 2, 4, 6, 3], [6, 1, 2, 4, 5, 3], [4, 1, 2, 6, 5, 3], [6, 1, 2, 5, 4, 3], [2, 1, 4, 5, 6, 3], [3, 1, 5, 6, 2, 4], [3, 1, 5, 2, 6, 4], [4, 1, 6, 2, 3, 5], [2, 1, 4, 6, 5, 3], [4, 1, 6, 3, 2, 5], [2, 1, 5, 6, 4, 3], [3, 1, 6, 2, 5, 4], [2, 1, 6, 5, 4, 3], [4, 1, 3, 2, 6, 5], [4, 1, 3, 6, 2, 5], [5, 1, 3, 4, 2, 6], [3, 1, 6, 5, 2, 4], [5, 1, 4, 3, 2, 6], [4, 1, 3, 5, 6, 2], [5, 1, 3, 6, 4, 2], [5, 1, 3, 4, 6, 2], [6, 1, 3, 4, 5, 2], [4, 1, 3, 6, 5, 2], [6, 1, 3, 5, 4, 2], [3, 1, 5, 6, 4, 2], [4, 1, 6, 3, 5, 2], [3, 1, 6, 5, 4, 2], [5, 1, 4, 3, 6, 2], [5, 1, 4, 6, 3, 2], [6, 1, 4, 5, 3, 2], [4, 1, 6, 5, 3, 2], [6, 1, 5, 4, 3, 2], [1, 3, 4, 5, 6, 2], [2, 4, 5, 6, 1, 3], [2, 4, 5, 1, 6, 3], [3, 5, 6, 1, 2, 4], [1, 3, 4, 6, 5, 2], [3, 5, 6, 2, 1, 4], [2, 4, 1, 5, 6, 3], [3, 5, 1, 6, 2, 4], [3, 5, 1, 2, 6, 4], [4, 6, 1, 2, 3, 5], [2, 4, 1, 6, 5, 3], [4, 6, 1, 3, 2, 5], [1, 3, 5, 6, 4, 2], [2, 4, 6, 1, 5, 3], [1, 3, 6, 5, 4, 2], [3, 5, 2, 1, 6, 4], [3, 5, 2, 6, 1, 4], [4, 6, 2, 3, 1, 5], [2, 4, 6, 5, 1, 3], [4, 6, 3, 2, 1, 5], [1, 4, 5, 6, 3, 2], [2, 5, 6, 1, 4, 3], [2, 5, 1, 6, 4, 3], [3, 6, 1, 2, 5, 4], [1, 4, 6, 5, 3, 2], [3, 6, 2, 1, 5, 4], [1, 5, 6, 4, 3, 2], [2, 6, 1, 5, 4, 3], [1, 6, 5, 4, 3, 2], [3, 2, 1, 6, 5, 4], [3, 2, 6, 1, 5, 4], [4, 2, 3, 1, 6, 5], [2, 6, 5, 1, 4, 3], [4, 3, 2, 1, 6, 5], [3, 2, 5, 6, 1, 4], [4, 2, 6, 3, 1, 5], [4, 2, 3, 6, 1, 5], [5, 2, 3, 4, 1, 6], [3, 2, 6, 5, 1, 4], [5, 2, 4, 3, 1, 6], [2, 5, 6, 4, 1, 3], [3, 6, 2, 5, 1, 4], [2, 6, 5, 4, 1, 3], [4, 3, 2, 6, 1, 5], [4, 3, 6, 2, 1, 5], [5, 3, 4, 2, 1, 6], [3, 6, 5, 2, 1, 4], [5, 4, 3, 2, 1, 6], [3, 2, 4, 5, 6, 1], [4, 2, 5, 6, 3, 1], [4, 2, 5, 3, 6, 1], [5, 2, 6, 3, 4, 1], [3, 2, 4, 6, 5, 1], [5, 2, 6, 4, 3, 1], [4, 2, 3, 5, 6, 1], [5, 2, 3, 6, 4, 1], [5, 2, 3, 4, 6, 1], [6, 2, 3, 4, 5, 1], [4, 2, 3, 6, 5, 1], [6, 2, 3, 5, 4, 1], [3, 2, 5, 6, 4, 1], [4, 2, 6, 3, 5, 1], [3, 2, 6, 5, 4, 1], [5, 2, 4, 3, 6, 1], [5, 2, 4, 6, 3, 1], [6, 2, 4, 5, 3, 1], [4, 2, 6, 5, 3, 1], [6, 2, 5, 4, 3, 1], [2, 4, 5, 6, 3, 1], [3, 5, 6, 2, 4, 1], [3, 5, 2, 6, 4, 1], [4, 6, 2, 3, 5, 1], [2, 4, 6, 5, 3, 1], [4, 6, 3, 2, 5, 1], [2, 5, 6, 4, 3, 1], [3, 6, 2, 5, 4, 1], [2, 6, 5, 4, 3, 1], [4, 3, 2, 6, 5, 1], [4, 3, 6, 2, 5, 1], [5, 3, 4, 2, 6, 1], [3, 6, 5, 2, 4, 1], [5, 4, 3, 2, 6, 1], [4, 3, 5, 6, 2, 1], [5, 3, 6, 4, 2, 1], [5, 3, 4, 6, 2, 1], [6, 3, 4, 5, 2, 1], [4, 3, 6, 5, 2, 1], [6, 3, 5, 4, 2, 1], [3, 5, 6, 4, 2, 1], [4, 6, 3, 5, 2, 1], [3, 6, 5, 4, 2, 1], [5, 4, 3, 6, 2, 1], [5, 4, 6, 3, 2, 1], [6, 4, 5, 3, 2, 1], [4, 6, 5, 3, 2, 1], [6, 5, 4, 3, 2, 1], [1, 3, 4, 5, 2, 6], [1, 4, 5, 6, 2, 3], [1, 3, 4, 2, 5, 6], [1, 4, 5, 2, 6, 3], [1, 4, 5, 2, 3, 6], [1, 5, 6, 2, 3, 4], [1, 3, 4, 2, 6, 5], [1, 5, 6, 2, 4, 3], [1, 3, 4, 6, 2, 5], [1, 4, 5, 3, 2, 6], [1, 4, 5, 3, 6, 2], [1, 5, 6, 3, 4, 2], [1, 3, 2, 4, 5, 6], [1, 4, 2, 5, 6, 3], [1, 4, 2, 5, 3, 6], [1, 5, 2, 6, 3, 4], [1, 3, 2, 4, 6, 5], [1, 5, 2, 6, 4, 3], [1, 4, 2, 3, 5, 6], [1, 5, 2, 3, 6, 4], [1, 5, 2, 3, 4, 6], [1, 6, 2, 3, 4, 5], [1, 4, 2, 3, 6, 5], [1, 6, 2, 3, 5, 4], [1, 3, 2, 5, 6, 4], [1, 4, 2, 6, 3, 5], [1, 3, 2, 6, 5, 4], [1, 5, 2, 4, 3, 6], [1, 5, 2, 4, 6, 3], [1, 6, 2, 4, 5, 3], [1, 4, 2, 6, 5, 3], [1, 6, 2, 5, 4, 3], [1, 3, 5, 6, 2, 4], [1, 3, 5, 2, 6, 4], [1, 4, 6, 2, 3, 5], [1, 4, 6, 3, 2, 5], [1, 3, 6, 2, 5, 4], [1, 4, 3, 2, 6, 5], [1, 4, 3, 6, 2, 5], [1, 5, 3, 4, 2, 6], [1, 3, 6, 5, 2, 4], [1, 5, 4, 3, 2, 6], [1, 4, 3, 5, 6, 2], [1, 5, 3, 6, 4, 2], [1, 5, 3, 4, 6, 2], [1, 6, 3, 4, 5, 2], [1, 4, 3, 6, 5, 2], [1, 6, 3, 5, 4, 2], [1, 4, 6, 3, 5, 2], [1, 5, 4, 3, 6, 2], [1, 5, 4, 6, 3, 2], [1, 6, 4, 5, 3, 2], [1, 2, 4, 5, 3, 6], [1, 2, 5, 6, 3, 4], [1, 2, 4, 3, 5, 6], [1, 2, 5, 3, 6, 4], [1, 2, 5, 3, 4, 6], [1, 2, 6, 3, 4, 5], [1, 2, 4, 3, 6, 5], [1, 2, 6, 3, 5, 4], [1, 2, 4, 6, 3, 5], [1, 2, 5, 4, 3, 6], [1, 2, 5, 4, 6, 3], [1, 2, 6, 4, 5, 3], [1, 2, 3, 5, 4, 6], [1, 2, 3, 6, 4, 5], [1, 2, 6, 4, 3, 5], [1, 2, 6, 5, 3, 4], [1, 5, 6, 3, 2, 4], [1, 6, 2, 4, 3, 5], [1, 4, 6, 2, 5, 3], [1, 5, 3, 2, 6, 4], [1, 5, 3, 6, 2, 4], [1, 6, 3, 4, 2, 5], [1, 4, 6, 5, 2, 3], [1, 6, 4, 3, 2, 5], [1, 6, 3, 2, 5, 4], [1, 6, 5, 2, 4, 3], [1, 3, 6, 4, 2, 5], [1, 3, 5, 4, 2, 6], [1, 5, 6, 4, 2, 3], [1, 6, 3, 5, 2, 4], [1, 6, 5, 4, 2, 3], [1, 6, 5, 3, 2, 4], [1, 3, 5, 4, 6, 2], [1, 3, 6, 4, 5, 2], [1, 6, 4, 3, 5, 2], [1, 6, 5, 3, 4, 2], [4, 5, 6, 2, 1, 3], [5, 6, 1, 3, 2, 4], [3, 4, 6, 1, 5, 2], [4, 5, 2, 1, 6, 3], [4, 5, 2, 6, 1, 3], [5, 6, 2, 3, 1, 4], [3, 4, 6, 5, 1, 2], [5, 6, 3, 2, 1, 4], [5, 1, 6, 3, 2, 4], [6, 1, 2, 4, 3, 5], [4, 1, 6, 2, 5, 3], [5, 1, 3, 2, 6, 4], [5, 1, 3, 6, 2, 4], [6, 1, 3, 4, 2, 5], [4, 1, 6, 5, 2, 3], [6, 1, 4, 3, 2, 5], [3, 5, 6, 1, 4, 2], [3, 5, 1, 6, 4, 2], [4, 6, 1, 2, 5, 3], [4, 6, 2, 1, 5, 3], [3, 6, 1, 5, 4, 2], [4, 2, 1, 6, 5, 3], [4, 2, 6, 1, 5, 3], [5, 2, 3, 1, 6, 4], [3, 6, 5, 1, 4, 2], [5, 3, 2, 1, 6, 4], [4, 2, 5, 6, 1, 3], [5, 2, 6, 3, 1, 4], [5, 2, 3, 6, 1, 4], [6, 2, 3, 4, 1, 5], [4, 2, 6, 5, 1, 3], [6, 2, 4, 3, 1, 5], [3, 5, 6, 4, 1, 2], [4, 6, 2, 5, 1, 3], [3, 6, 5, 4, 1, 2], [5, 3, 2, 6, 1, 4], [5, 3, 6, 2, 1, 4], [6, 3, 4, 2, 1, 5], [4, 6, 5, 2, 1, 3], [6, 4, 3, 2, 1, 5], [5, 6, 2, 1, 4, 3], [6, 1, 3, 2, 5, 4], [4, 6, 1, 5, 3, 2], [5, 2, 1, 6, 4, 3], [5, 2, 6, 1, 4, 3], [6, 2, 3, 1, 5, 4], [4, 6, 5, 1, 3, 2], [6, 3, 2, 1, 5, 4], [6, 2, 1, 5, 4, 3], [6, 5, 1, 4, 3, 2], [2, 6, 3, 1, 5, 4], [2, 4, 3, 1, 6, 5], [5, 6, 4, 1, 3, 2], [6, 2, 5, 1, 4, 3], [6, 5, 4, 1, 3, 2], [6, 5, 2, 1, 4, 3], [2, 5, 6, 3, 1, 4], [2, 5, 3, 6, 1, 4], [2, 6, 3, 4, 1, 5], [2, 6, 4, 3, 1, 5], [2, 3, 6, 4, 1, 5], [2, 3, 5, 4, 1, 6], [2, 6, 3, 5, 1, 4], [2, 4, 3, 6, 1, 5], [2, 4, 6, 3, 1, 5], [2, 4, 5, 3, 1, 6], [2, 6, 5, 3, 1, 4], [2, 5, 4, 3, 1, 6], [4, 5, 6, 3, 1, 2], [5, 6, 2, 4, 1, 3], [5, 2, 6, 4, 1, 3], [6, 2, 3, 5, 1, 4], [4, 6, 5, 3, 1, 2], [6, 3, 2, 5, 1, 4], [5, 6, 4, 3, 1, 2], [6, 2, 5, 4, 1, 3], [6, 5, 4, 3, 1, 2], [6, 5, 2, 4, 1, 3], [3, 6, 4, 2, 1, 5], [3, 5, 4, 2, 1, 6], [5, 6, 4, 2, 1, 3], [6, 3, 5, 2, 1, 4], [6, 5, 4, 2, 1, 3], [6, 5, 3, 2, 1, 4], [2, 4, 5, 3, 6, 1], [2, 5, 6, 3, 4, 1], [2, 4, 3, 5, 6, 1], [2, 5, 3, 6, 4, 1], [2, 5, 3, 4, 6, 1], [2, 6, 3, 4, 5, 1], [2, 4, 3, 6, 5, 1], [2, 6, 3, 5, 4, 1], [2, 4, 6, 3, 5, 1], [2, 5, 4, 3, 6, 1], [2, 5, 4, 6, 3, 1], [2, 6, 4, 5, 3, 1], [2, 3, 5, 4, 6, 1], [2, 3, 6, 4, 5, 1], [2, 6, 4, 3, 5, 1], [2, 6, 5, 3, 4, 1], [5, 6, 3, 2, 4, 1], [6, 2, 4, 3, 5, 1], [4, 6, 2, 5, 3, 1], [5, 3, 2, 6, 4, 1], [5, 3, 6, 2, 4, 1], [6, 3, 4, 2, 5, 1], [4, 6, 5, 2, 3, 1], [6, 4, 3, 2, 5, 1], [6, 3, 2, 5, 4, 1], [6, 5, 2, 4, 3, 1], [3, 6, 4, 2, 5, 1], [3, 5, 4, 2, 6, 1], [5, 6, 4, 2, 3, 1], [6, 3, 5, 2, 4, 1], [6, 5, 4, 2, 3, 1], [6, 5, 3, 2, 4, 1], [3, 5, 4, 6, 2, 1], [3, 6, 4, 5, 2, 1], [6, 4, 3, 5, 2, 1], [6, 5, 3, 4, 2, 1]]]
st = set()
st2 = set( tuple(perm) for perm in christian[5]  )
for gridt in res:
    print('GRID', gridt)
    cnt = {}
    for perm in sorted(res[gridt], key=lambda p: (len(p), p)):
        # if len(perm) == 3:
        #     print(perm)
        cnt.setdefault(len(perm), 0)
        cnt[len(perm)] += 1
        if len(perm) == 5:
            st.add(perm)
    # for k,v in sorted(cnt.items()):
    #     print(k,v)

for perm in st:
    if perm not in st2:
        print(perm)

